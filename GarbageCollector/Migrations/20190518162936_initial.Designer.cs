// <auto-generated />
using System;
using GarbageCollector.Database.Dbos;
using GeoAPI.Geometries;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace GarbageCollector.Migrations
{
    [DbContext(typeof(GarbageCollectorContext))]
    [Migration("20190518162936_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.2.1-servicing-10028")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("GarbageCollector.Domain.GarbageAppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("CurrentLocationId");

                    b.Property<string>("Login");

                    b.HasKey("Id");

                    b.HasIndex("CurrentLocationId");

                    b.ToTable("AppUsers");
                });

            modelBuilder.Entity("GarbageCollector.Domain.Location", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<IPoint>("Coordinates");

                    b.HasKey("Id");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("GarbageCollector.Domain.TrashCan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("GarbageAppUserId");

                    b.Property<Guid?>("WasteTakePointId");

                    b.HasKey("Id");

                    b.HasIndex("GarbageAppUserId");

                    b.HasIndex("WasteTakePointId");

                    b.ToTable("TrashCan");
                });

            modelBuilder.Entity("GarbageCollector.Domain.WasteCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Material");

                    b.Property<string>("Name");

                    b.Property<Guid?>("TrashCanId");

                    b.Property<Guid?>("WasteTakePointId");

                    b.HasKey("Id");

                    b.HasIndex("TrashCanId");

                    b.HasIndex("WasteTakePointId");

                    b.ToTable("WasteCategories");
                });

            modelBuilder.Entity("GarbageCollector.Domain.WasteTakePoint", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("LocationId");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.ToTable("WasteTakePoints");
                });

            modelBuilder.Entity("GarbageCollector.Domain.GarbageAppUser", b =>
                {
                    b.HasOne("GarbageCollector.Domain.Location", "CurrentLocation")
                        .WithMany()
                        .HasForeignKey("CurrentLocationId");
                });

            modelBuilder.Entity("GarbageCollector.Domain.TrashCan", b =>
                {
                    b.HasOne("GarbageCollector.Domain.GarbageAppUser")
                        .WithMany("TrashCans")
                        .HasForeignKey("GarbageAppUserId");

                    b.HasOne("GarbageCollector.Domain.WasteTakePoint", "WasteTakePoint")
                        .WithMany()
                        .HasForeignKey("WasteTakePointId");
                });

            modelBuilder.Entity("GarbageCollector.Domain.WasteCategory", b =>
                {
                    b.HasOne("GarbageCollector.Domain.TrashCan")
                        .WithMany("WasteCategories")
                        .HasForeignKey("TrashCanId");

                    b.HasOne("GarbageCollector.Domain.WasteTakePoint")
                        .WithMany("AcceptingCategories")
                        .HasForeignKey("WasteTakePointId");
                });

            modelBuilder.Entity("GarbageCollector.Domain.WasteTakePoint", b =>
                {
                    b.HasOne("GarbageCollector.Domain.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId");
                });
#pragma warning restore 612, 618
        }
    }
}
